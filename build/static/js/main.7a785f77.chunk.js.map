{"version":3,"sources":["components/Wrapper/index.js","components/Title/index.js","components/EmployeeCard/index.js","components/Search/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Title","Jumbotron","EmployeeCard","alt","name","src","image","position","birth","country","Search","filterList","e","filterTarget","target","value","employeeList","state","employees","filter","i","Object","values","join","toLocaleLowerCase","indexOf","toLowerCase","setState","filteredEmployees","type","placeholder","onChange","this","map","employee","id","key","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yqDAOeA,MAJf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,cCW5BC,MAXf,WACI,OACI,6BACE,kBAACC,EAAA,EAAD,CAAWH,UAAU,aACjB,wBAAIA,UAAU,SAAd,sBACA,uBAAGA,UAAU,QAAb,qC,mBCqBCI,MA3Bf,SAAsBL,GAElB,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,iBACX,yBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,SAErC,yBAAKR,UAAU,WACX,4BACA,4BACE,yCADF,IAC0BD,EAAMO,MAEhC,4BACE,6CADF,IAC8BP,EAAMU,UAEpC,4BACE,kDADF,IACmCV,EAAMW,OAEzC,4BACE,4CADF,IAC6BX,EAAMY,aC8CpCC,E,kDA5Db,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAMRc,WAAa,SAAAC,GACX,IAAMC,EAAeD,EAAEE,OAAOC,MAC1BC,EAAe,EAAKC,MAAMC,UAC9BF,EAAeA,EAAaG,QAAO,SAAAC,GAI/B,OAAuD,IAH5CC,OAAOC,OAAOF,GACxBG,KAAK,IACLC,oBACaC,QAAQZ,EAAaa,kBAEvC,EAAKC,SAAS,CAACC,kBAAmBZ,KAdlC,EAAKC,MAAQ,CACXC,YACAU,kBAAmB,IAJL,E,qDAoBhB,OACE,yBAAK9B,UAAU,eACb,2BAAOA,UAAU,SAAS+B,KAAK,OAAOC,YAAY,SAASC,SAAUC,KAAKrB,aAGxEqB,KAAKf,MAAMW,kBAAkB,GAE7BI,KAAKf,MAAMW,kBAAkBK,KAAI,SAAAC,GAAQ,OACvC,kBAAC,EAAD,CACAC,GAAID,EAASC,GACbC,IAAKF,EAASC,GACd/B,KAAM8B,EAAS9B,KACfE,MAAO4B,EAAS5B,MAChBC,SAAU2B,EAAS3B,SACnBC,MAAO0B,EAAS1B,MAChBC,QAASyB,EAASzB,aAIpBuB,KAAKf,MAAMC,UAAUe,KAAI,SAAAC,GAAQ,OAC/B,kBAAC,EAAD,CACAC,GAAID,EAASC,GACbC,IAAKF,EAASC,GACd/B,KAAM8B,EAAS9B,KACfE,MAAO4B,EAAS5B,MAChBC,SAAU2B,EAAS3B,SACnBC,MAAO0B,EAAS1B,MAChBC,QAASyB,EAASzB,kB,GAhDT4B,aCINC,MARf,WACI,OACI,6BACA,kBAAC,EAAD,QCcOC,E,4MAbbtB,MAAQ,CACNC,a,uDAIA,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUmB,aCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7a785f77.chunk.js","sourcesContent":["import React from \"react\";\n// import \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;","import React from \"react\";\nimport { Jumbotron } from \"reactstrap\";\nimport \"./style.css\";\n\nfunction Title() {\n    return (\n        <div>\n          <Jumbotron className=\"jumbotron\">\n              <h1 className=\"title\">Employee Directory</h1>\n              <p className=\"lead\">Search for an employee by name</p>\n          </Jumbotron>\n        </div>\n    );   \n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n  \n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img alt={props.name} src={props.image} />\n            </div>\n            <div className=\"content\">\n                <ul>\n                <li>\n                  <strong>Name:</strong> {props.name} \n                </li> \n                <li>\n                  <strong>Position:</strong> {props.position}\n                </li>\n                <li>\n                  <strong>Date of Birth:</strong> {props.birth}\n                </li>\n                <li>\n                  <strong>Country:</strong> {props.country}\n                </li>\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default EmployeeCard;","import React, {Component} from \"react\";\nimport employees from \"../../employees.json\";\nimport \"./style.css\";\nimport EmployeeCard from \"../EmployeeCard\";\n\n\n\nclass Search extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      employees,\n      filteredEmployees: []\n    }\n  }\n  filterList = e => {\n    const filterTarget = e.target.value;\n    let employeeList = this.state.employees;\n    employeeList = employeeList.filter(i =>{\n      let values = Object.values(i)\n        .join(\"\")\n        .toLocaleLowerCase();\n        return values.indexOf(filterTarget.toLowerCase()) !== -1;\n    })\n    this.setState({filteredEmployees: employeeList});\n  }\n  \n  render(){\n    return(\n      <div className=\"filter-list\">\n        <input className=\"search\" type=\"text\" placeholder=\"Search\" onChange={this.filterList}/>\n        \n        {\n          this.state.filteredEmployees[0]?\n          \n          this.state.filteredEmployees.map(employee => (\n            <EmployeeCard\n            id={employee.id}\n            key={employee.id}\n            name={employee.name}\n            image={employee.image}\n            position={employee.position}\n            birth={employee.birth}\n            country={employee.country}\n            />\n          )) \n          :\n          this.state.employees.map(employee => (\n            <EmployeeCard\n            id={employee.id}\n            key={employee.id}\n            name={employee.name}\n            image={employee.image}\n            position={employee.position}\n            birth={employee.birth}\n            country={employee.country}\n            />\n          ))\n\n        \n        }\n        \n  \n      </div>\n    )\n  }\n}\n\nexport default Search;","import React from \"react\";\nimport Search from \"../Search\";\n\nfunction Main () {\n    return (\n        <div>\n        <Search />\n        </div>\n\n    )\n}\nexport default Main;","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport Jumbotron from \"./components/Title\";\nimport employees from \"./employees.json\";\nimport Main from \"./components/Main\";\n\nclass App extends Component {\n  state = {\n    employees\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Jumbotron />\n        <Main />\n      </Wrapper>\n    )\n  }\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}